
.. _zend.json.basics:

Basic Usage
===========

Usage of ``Zend_Json`` involves using the two public static methods available: ``Zend_Json::encode()`` and ``Zend_Json::decode()``.

.. code-block:: php
   :linenos:

   // Retrieve a value:
   $phpNative = Zend_Json::decode($encodedValue);

   // Encode it to return to the client:
   $json = Zend_Json::encode($phpNative);


.. _zend.json.basics.prettyprint:

Pretty-printing JSON
--------------------

Sometimes, it may be hard to explore *JSON* data generated by ``Zend_Json::encode()``, since it has no spacing or indentation. In order to make it easier, ``Zend_Json`` allows you to pretty-print *JSON* data in the human-readable format with ``Zend_Json::prettyPrint()``.

.. code-block:: php
   :linenos:

   // Encode it to return to the client:
   $json = Zend_Json::encode($phpNative);
   if($debug) {
       echo Zend_Json::prettyPrint($json, array("indent" => " "));
   }

Second optional argument of ``Zend_Json::prettyPrint()`` is an option array. Option ``indent`` allows to set indentation string - by default it's a single tab character.


