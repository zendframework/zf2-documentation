.. _performance.localization:

גלובאליזציה (i18n) ותמיכה בשפות שונות (l10n)
============================================

גלובאליזציה ותמיכה בשפות שונות הינם גורם הכרחי כדי לפנות לקהל
יעד רחב יותר, ולוודא שכל המשתמשים מקבלים את המידע שהם צריכים.
למרות זאת, זה בדרך כלל מגיע עם בעיות משמעותיות בביצועי המערכת.
להלן כמה דרכים שניתן למנוע את בעיות הביצועים שנגרמים עקב שימוש
בגלובאליזציה ותמיכה בשפות שונות בעת פיתוח המערכת.

.. _performance.localization.translationadapter:

באיזו מתאם תרגום כדי לי להשתמש?
-------------------------------

לא כל מתאמי התרגום הם שווים. לחלקם יש יותר אפשרויות מאחרים,
וחלקם עובדים טוב יותר מאחרים. בנוסף, יתכן ומסיבות פיתוח שלכם
תדרשו להשתמש במתאם תרגום מסויים. למרות שאם יש לכם את אפשרות
הבחירה, איזה מתאם הוא המהיר ביותר?

.. _performance.localization.translationadapter.fastest:

השתמשו במתאם תרגום ללא שימוש ב XML למיטב הביצועים והמהירות
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Zend Framework מגיע עם מגוון מתאמי תרגום שונים לשימוש. לפחות כמחצית
מהם משתמשים בפורמט XML, אשר דורשים הרבה זכרון ומציגים ביצועים
פחות טובים מאחרים. למרבה המזל ישנם מתאמים אחרים אשר משתמשים
בפורמטים אשר נטענים הרבה יותר מהר. מבחינת מהירות, מהמהיר ביותר
אל האיטי ביותר, הינם:

- **Array**: זהו המהיר ביותר, מאחר והוא נטען ישירות ל PHP ברגע שהקובץ
  נוסף.

- **CSV**: שימוש ב *fgetcsv()* כדי לטעון את קובץ ה CSV ולהפוך אותו למערך PHP
  רגיל.

- **INI**: שימוש ב *parse_ini_file()* כדי לטעון ולעבד קובץ INI ולהפוך אותו
  לקובץ בפורמט PHP רגיל. אפשרות זו וה CSV הם בערך זהים מבחינת מהירות
  וביצועים.

- **Gettext**: המתאם של Zend Framework בשימוש עם gettext **לא** משתמש בתוסף ה gettext
  הנפוץ, מאחר והוא לא בטוח ולא מאפשר הגדרה של יותר משפה אחת פר
  שרת. כתוצאה מכך הוא איטי יותר משימוש בתוסף ישירות, אבל מאחר ה
  gettext משתמש בקבצים בפורמט בינארי, הוא מהיר יותר מעיבוד קובץ XML.

אם הנכם דואגים לביצועי המערכת שלכם, אנו ממליצים שימוש באחד
מהמתאמים המצויינים מעלה.

.. _performance.localization.cache:

כיצד ניתן להאיץ את התרגום והמתאמים אף יותר?
-------------------------------------------

אולי, מסיבות עסקיות, הנכם מוגבלים לשימוש במתאם תרגום לקבצי XML.
או שאולי תרצו להאיץ את הדברים אף יותר. איך תוכלו לעשות זאת?

.. _performance.localization.cache.usage:

שימוש במטמון
^^^^^^^^^^^^

גם *Zend_Translator* ו *Zend_Locale* מאפשרים שימוש במטמון אשר מאיצים ומשפרים
את הביצועים בצורה משמעותית. בשני המקרים, הבעיה הגדולה ביותר
והבעיה שיוצרת את צוואר הבקבוק היא בדרך כלל קריאה ועיבוד הקבצים,
לא הצגת הנתונים; שימוש במטמון מסיר את הדרישה של טעינה ועיבוד של
קבצי השפה בכל פעם.

ניתן לקרוא אודות שימוש במטמון עם קבצי התרגום השונים בקישורים
הבאים:

- :ref:`Zend_Translator מתאם מטמון <zend.translator.adapter.caching>`

- :ref:`Zend_Locale מטמון <zend.locale.cache>`


