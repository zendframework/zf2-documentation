.. EN-Revision: none
.. _zend.search.lucene.extending:

Расширяемость
=============

.. _zend.search.lucene.extending.analysis:

Анализ текста
-------------

Класс *Zend\Search\Lucene\Analysis\Analyzer* используется индексатором для
разбиения текстовых полей документа на лексемы.

Методы *Zend\Search\Lucene\Analysis\Analyzer::getDefault()* и
*Zend\Search\Lucene\Analysis\Analyzer::setDefault()* используются для получения и
установки анализатора по умолчанию.

Таким образом, вы можете устанавливать собственный анализатор
текста или выбирать его из ряда предопределенных
анализаторов: *Zend\Search\Lucene\Analysis\Analyzer\Common\Text* и
*Zend\Search\Lucene\Analysis\Analyzer\Common\Text\CaseInsensitive* (по умолчанию). Оба
интерпретируют лексему как последовательность букв.
*Zend\Search\Lucene\Analysis\Analyzer\Common\Text\CaseInsensitive* приводит лексемы к
нижнему регистру.

Переключение между анализаторами:

.. code-block:: php
   :linenos:

   <?php
   Zend\Search\Lucene\Analysis\Analyzer::setDefault(
       new Zend\Search\Lucene\Analysis\Analyzer\Common\Text());
   ...
   $index->addDocument($doc);
*Zend\Search\Lucene\Analysis\Analyzer\Common* спроектирован для того, чтобы быть
родительским классом для всех анализаторов, определяемых
пользователем. В наследующем классе достаточно определить
методы *reset()* и *nextToken()*, которые берут строку из свойства $_input и
возвращают лексемы шаг за шагом (``NULL`` означает конец потока).

Метод *nextToken()* должен использовать метод *normalize()* для каждой
лексемы. Это позволит использовать фильтры лексем с вашим
анализатором.

Ниже приведен пример пользовательского анализатора, котрорый
принимает слова с цифрами как элементы:

   .. rubric:: Собственный анализатор текста

   .. code-block:: php
      :linenos:

      <?php
      /** Это созданный пользователем текстовый анализатор, который интерпретирует слова с цифрами как один элемент. */

      /** Zend\Search\Lucene\Analysis\Analyzer hierarchy */
      require_once 'Zend/Search/Lucene/Analysis/Analyzer.php';

      class My_Analyzer extends Zend\Search\Lucene\Analysis\Analyzer\Common
      {
          private $_position;

          /**
           * Установка позиции в начальное состояние
           */
          public function reset()
          {
              $this->_position = 0;
          }

          /**
           * API для разбиения на лексемы
           * Получение следующей лексемы
           * Возвращает null, если достигнут конец потока
           *
           * @return Zend\Search\Lucene\Analysis\Token|null
           */
          public function nextToken()
          {
              if ($this->_input === null) {
                  return null;
              }

              while ($this->_position < strlen($this->_input)) {
                  // пропуск пробела
                  while ($this->_position < strlen($this->_input) &&
                         !ctype_alnum( $this->_input[$this->_position] )) {
                      $this->_position++;
                  }

                  $termStartPosition = $this->_position;

                  // чтение лексемы
                  while ($this->_position < strlen($this->_input) &&
                         ctype_alnum( $this->_input[$this->_position] )) {
                      $this->_position++;
                  }

                  // Пустая лексема, конец потока
                  if ($this->_position == $termStartPosition) {
                      return null;
                  }

                  $token = new Zend\Search\Lucene\Analysis\Token(
                                            substr($this->_input,
                                                   $termStartPosition,
                                                   $this->_position - $termStartPosition),
                                            $termStartPosition,
                                            $this->_position);
                  $token = $this->normalize($token);
                  if ($token !== null) {
                      return $token;
                  }
                  // Продолжение, если лексема пропущена
              }

              return null;
          }
      }

      Zend\Search\Lucene\Analysis\Analyzer::setDefault(
          new My_Analyzer());


.. _zend.search.lucene.extending.filters:

Фильтрация лексем
-----------------

Анализатор *Zend\Search\Lucene\Analysis\Analyzer\Common* также предоставляет
механизм фильтрации лексем.

Класс *Zend\Search\Lucene\Analysis\TokenFilter* является уровнем абстракции для
таких фильтров. Он должен использоваться как предок для ваших
собственных фильтров.

Пользовательские фильтры должны реализовать метод *normalize()*,
который может преобразовывать лексему или сигнализировать,
что лексема должна быть пропущена.

В предоставляемом анализаторе уже определены три фильтра:

   - *Zend\Search\Lucene\Analysis\TokenFilter\LowerCase*

   - *Zend\Search\Lucene\Analysis\TokenFilter\ShortWords*

   - *Zend\Search\Lucene\Analysis\TokenFilter\StopWords*



Фильтр *LowerCase* уже используется для анализатора
*Zend\Search\Lucene\Analysis\Analyzer\Common\Text\CaseInsensitive*, который применяется по
умолчанию.

*ShortWords* и *StopWords* могут использоваться с уже включенными
анализаторами или вашими собственными:

.. code-block:: php
   :linenos:

   <?php
   $stopWords = array('a', 'an', 'at', 'the', 'and', 'or', 'is', 'am');
   $stopWordsFilter = new Zend\Search\Lucene\Analysis\TokenFilter\StopWords($stopWords);

   $analyzer = new Zend\Search\Lucene\Analysis\Analyzer\Common\TextNum\CaseInsensitive();
   $analyzer->addFilter($stopWordsFilter);

   Zend\Search\Lucene\Analysis\Analyzer::setDefault($analyzer);
.. code-block:: php
   :linenos:

   <?php
   $shortWordsFilter = new Zend\Search\Lucene\Analysis\TokenFilter\ShortWords();

   $analyzer = new Zend\Search\Lucene\Analysis\Analyzer\Common\TextNum\CaseInsensitive();
   $analyzer->addFilter($shortWordsFilter);

   Zend\Search\Lucene\Analysis\Analyzer::setDefault($analyzer);
Конструктор *Zend\Search\Lucene\Analysis\TokenFilter\StopWords* принимает массив
стоп-слов в качестве аргумента. Но стоп-слова можно также
загружать и из файла:

.. code-block:: php
   :linenos:

   <?php
   $stopWordsFilter = new Zend\Search\Lucene\Analysis\TokenFilter\StopWords();
   $stopWordsFilter->loadFromFile($my_stopwords_file);

   $analyzer = new Zend\Search\Lucene\Analysis\Analyzer\Common\TextNum\CaseInsensitive();
   $analyzer->addFilter($stopWordsFilter);

   Zend\Search\Lucene\Analysis\Analyzer::setDefault($analyzer);
Файл должен быть текстовым с одним словом в каждой строке.
Символом '#' помечаются строки с комментариями.

Конструктор *Zend\Search\Lucene\Analysis\TokenFilter\ShortWords* имеет один
необязательный параметр, это ограничение длины слова. Его
значение по умолчанию равно 2.

.. _zend.search.lucene.extending.scoring:

Алгоритмы ранжирования
----------------------

Ранг ``q`` документа ``d`` определяется следующим образом:

*score(q,d) = sum( tf(t in d) * idf(t) * getBoost(t.field in d) * lengthNorm(t.field in d) ) * coord(q,d) *
queryNorm(q)*

tf(t in d) -*Zend\Search\Lucene\Search\Similarity::tf($freq)*- коэффициент ранга,
основанный на том, насколько часто встречается элемент или
фраза в документе.

idf(t) -*Zend\Search\Lucene\Search\SimilaritySimilarity::tf($term, $reader)*- коэффициент ранга
для простого элемента применительно к определенному индексу.

getBoost(t.field in d) - коэффициент усиления для поля элемента.

lengthNorm($term) - значение нормализации для поля, получаемое из
общего количества элементов, содержащихся в поле. Это значение
хранится внутри индекса. Эти значения вместе с коэффициентом
усиления поля хранятся в индексе, результатом их умножения
является ранг для каждого поля.

Совпадения в длинных полях менее точны, поэтому реализации
этого метода обычно возвращают тем меньшие значения, чем
больше число лексем, и тем большие значения, чем меньше число
лексем.

сoord(q,d) -*Zend\Search\Lucene\Search\Similarity::coord($overlap, $maxOverlap)*- коэффициент
ранга, основанный на относительной доле всех элементов
запроса, найденных в документе.

Присутствие большого количества элементов запроса означает
лучшее соответствие запросу, поэтому реализации этого метода
обычно возвращают бОльшие значения, когда соотношение между
этими параметрами большое и меньшие значения, когда
соотношение между ними небольшое.

queryNorm(q) - значение нормализации для запроса, получаемое из
суммы возведенных в квадрат весов каждого из элементов
запроса. Это значение затем умножается в вес каждого элемента
запроса.

Это не влияет на ранжирование, цель нормализации состоит в том,
чтобы сделать соизмеримыми ранги, полученные при различных
запросах.

Алгоритм ранжирования может быть изменен через определение
своего собственного класса. Для этого надо создать потомка
класса Zend\Search\Lucene\Search\Similarity, как показано ниже, затем
использовать метод *Zend\Search\Lucene\Search\Similarity::setDefault($similarity);* для
установки объекта как используемого по умолчанию.

.. code-block:: php
   :linenos:

   <?php

   class MySimilarity extends Zend\Search\Lucene\Search\Similarity {
       public function lengthNorm($fieldName, $numTerms) {
           return 1.0/sqrt($numTerms);
       }

       public function queryNorm($sumOfSquaredWeights) {
           return 1.0/sqrt($sumOfSquaredWeights);
       }

       public function tf($freq) {
           return sqrt($freq);
       }

       /**
        * Сейчас не используется. Подсчитывает сумму соответствий неточной фразе,
        * основанную на изменяемом расстоянии.
        */
       public function sloppyFreq($distance) {
           return 1.0;
       }

       public function idfFreq($docFreq, $numDocs) {
           return log($numDocs/(float)($docFreq+1)) + 1.0;
       }

       public function coord($overlap, $maxOverlap) {
           return $overlap/(float) $maxOverlap;
       }
   }

   $mySimilarity = new MySimilarity();
   Zend\Search\Lucene\Search\Similarity::setDefault($mySimilarity);

   ?>
.. _zend.search.lucene.extending.storage:

Контейнеры хранения
-------------------

Абстрактный класс *Zend\Search\Lucene\Storage\Directory* определяет функционал
директории.

Конструктор *Zend\Search\Lucene* использует строку или объект
*Zend\Search\Lucene\Storage\Directory* как входные данные.

*Zend\Search\Lucene\Storage\Directory\Filesystem* реализует функционал директории
для файловой системы.

Если для конструктора *Zend\Search\Lucene* в качестве входных данных
испольуется строка, то считыватель индекса (объект *Zend\Search\Lucene*)
рассматривает ее как путь в файловой системе и сама
инстанцирует объекты *Zend\Search\Lucene\Storage\Directory\Filesystem*.

Вы можете определить собственную реализацию директории,
создав потомка класса *Zend\Search\Lucene\Storage\Directory*.

Методы *Zend\Search\Lucene\Storage\Directory*:

.. code-block:: php
   :linenos:

   <?php

   abstract class Zend\Search\Lucene\Storage\Directory {
   /**
    * Закрывает средство хранения.
    *
    * @return void
    */
   abstract function close();


   /**
    * Создает новый пустой файл с данным именем в директории.
    *
    * @param string $name
    * @return void
    */
   abstract function createFile($filename);


   /**
    * Удаляет существующий файл в директории.
    *
    * @param string $filename
    * @return void
    */
   abstract function deleteFile($filename);


   /**
    * Возвращает true, если файл с данным именем существует.
    *
    * @param string $filename
    * @return boolean
    */
   abstract function fileExists($filename);


   /**
    * Возвращает длину файла в директории.
    *
    * @param string $filename
    * @return integer
    */
   abstract function fileLength($filename);


   /**
    * Возвращает время последнего изменения файла в формате UNIX.
    *
    * @param string $filename
    * @return integer
    */
   abstract function fileModified($filename);


   /**
    * Переименовывает существующий файл в директории.
    *
    * @param string $from
    * @param string $to
    * @return void
    */
   abstract function renameFile($from, $to);


   /**
    * Устанавливает время изменения файла в текущее.
    *
    * @param string $filename
    * @return void
    */
   abstract function touchFile($filename);


   /**
    * Возвращает объект Zend\Search\Lucene\Storage\File для данного файла в директории.
    *
    * @param string $filename
    * @return Zend\Search\Lucene\Storage\File
    */
   abstract function getFileObject($filename);

   }

   ?>
Метод *getFileObject($filename)* класса *Zend\Search\Lucene\Storage\Directory* возвращает
объект *Zend\Search\Lucene\Storage\File*.

Абстрактный класс *Zend\Search\Lucene\Storage\File* реализует абстракцию
файла и примитивы чтения файла индекса.

Вы должны создать класс, наследующий от *Zend\Search\Lucene\Storage\File* для
своей реализации директории.

Только два метода класса *Zend\Search\Lucene\Storage\File* должны быть
перегружены в вашей реализации:

.. code-block:: php
   :linenos:

   <?php

   class MyFile extends Zend\Search\Lucene\Storage\File {
       /**
        * Устанавливает индикатор позиции и перемещает указатель файла.
        * Новая позиция, измеряемая в байтах от начала файла,
        * получается добавлением смещения к позиции, определяемой аргументом $whence,
        * который может принимать следующие значения:
        * SEEK_SET - Устанавливает позицию равной смещению в байтах.
        * SEEK_CUR - Устанавливает позицию равной текущей позиции плюс смещение.
        * SEEK_END - Устанавливает позицию равной концу файла плюс смещение.
        * (Для перемещения позиции относительно конца файла вы должны передать отрицательное значение смещения)
        * В случае успеха возвращает 0; иначе -1
        *
        * @param integer $offset
        * @param integer $whence
        * @return integer
        */
       public function seek($offset, $whence=SEEK_SET) {
           ...
       }

       /**
        * Считывает $length байт из файла и перемещает указатель файла.
        *
        * @param integer $length
        * @return string
        */
       protected function _fread($length=1) {
           ...
       }
   }

   ?>

