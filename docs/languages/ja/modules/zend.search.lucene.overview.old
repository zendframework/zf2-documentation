.. EN-Revision: none
.. _zend.search.lucene.overview:

概要
==

.. _zend.search.lucene.introduction:

導入
--

``Zend_Search_Lucene`` は、完全に PHP 5
で書かれている汎用的なテキスト検索エンジンです。
インデックスをファイルシステム上に保存するためデータベースサーバを必要とせず、
たいていの PHP ウェブサイト上で動作させることができます。 ``Zend_Search_Lucene``
は、以下の機能をサポートしています。

   - 重要度による検索 - 最もマッチした結果が最初に返されます

   - さまざまな強力な検索方式: フレーズ検索、boolean 検索、ワイルドカード検索、
     あいまい検索、範囲指定検索などなど

   - 指定したフィールド (例: タイトル、作者、内容) による検索

``Zend_Search_Lucene`` は Apache Lucene プロジェクトから派生したものです。 現在 (Zend Framework
1.6 以降) サポートしている Lucene インデックスフォーマットバージョンは 1.4 - 2.3
です。 Lucene についての詳細は `http://lucene.apache.org/java/docs/`_ を参照ください。

.. note::

   以前の ``Zend_Search_Lucene`` の実装は Lucene 1.4 (1.9) - 2.1
   インデックスフォーマットに対応しています。

   Zend Framework 1.5 以降、2.1
   より前のインデックスフォーマットで作成されたインデックスは ``Zend_Search_Lucene``
   をアップグレードすると 自動的に Lucene 2.1
   フォーマットにアップグレードされるようになっています。
   いったんアップグレードされたインデックスは、 Zend Framework 1.0.x に含まれる
   Zend_Search_Lucene の実装で読み込むことができません。

.. _zend.search.lucene.index-creation.documents-and-fields:

Document および Field オブジェクト
-------------------------

``Zend_Search_Lucene`` は、ドキュメント単位でインデックスを作成します。
ドキュメントは名前つきのフィールドから構成され、
検索対象のコンテンツがフィールドの中に含まれます。

ドキュメントを表すのが ``Zend_Search_Lucene_Document``
オブジェクトです。このオブジェクトの中には、フィールドを表す
``Zend_Search_Lucene_Field`` オブジェクトが含まれます。

あらゆる種類の情報がインデックス化される可能性があることに注意しましょう。
アプリケーション固有の情報やメタデータをドキュメントのフィールドに格納し、
検索結果のドキュメントとして後で取得できます。

インデクサを制御するのは、あなたが作成するアプリケーションの役割です。
ということは、あなたのアプリケーションからアクセス可能な、
あらゆる内容のデータがインデックス化される可能性があるということです。
例えばファイルシステム、データベース、HTML フォームなどが考えられます。

``Zend_Search_Lucene_Field`` クラスには、
さまざまな性質のフィールドを作成するための静的メソッドが定義されています。

.. code-block:: php
   :linenos:

   $doc = new Zend_Search_Lucene_Document();

   // フィールドはトークン化されませんが、インデックス化されて保存されます。
   // 保存されたフィールドは、インデックスから取得できます。
   $doc->addField(Zend_Search_Lucene_Field::Keyword('doctype',
                                                    'autogenerated'));

   // フィールドはトークン化もインデックス化も行われませんが、インデックスに保存されます。
   $doc->addField(Zend_Search_Lucene_Field::UnIndexed('created',
                                                      time()));

   // バイナリ文字列フィールドはトークン化もインデックス化も行われません。
   // しかしインデックスには保存されます。
   $doc->addField(Zend_Search_Lucene_Field::Binary('icon',
                                                   $iconData));

   // フィールドがトークン化・インデックス化されてインデックスに保存されます。
   $doc->addField(Zend_Search_Lucene_Field::Text('annotation',
                                                 'Document annotation text'));

   // フィールドはトークン化されてインデックス化されますが、インデックスには保存されません。
   $doc->addField(Zend_Search_Lucene_Field::UnStored('contents',
                                                     'My document content'));

これらの各メソッド (``Zend_Search_Lucene_Field::Binary()`` メソッドを除く)
は、オプションのパラメータ *$encoding* を持っています。
これで入力データのエンコーディングを指定します。

エンコーディングはドキュメントによって異なるでしょうし、
同一ドキュメント内でもフィールドによって異なることもあるでしょう。

   .. code-block:: php
      :linenos:

      $doc = new Zend_Search_Lucene_Document();
      $doc->addField(Zend_Search_Lucene_Field::Text('title',
                                                    $title,
                                                    'iso-8859-1'));
      $doc->addField(Zend_Search_Lucene_Field::UnStored('contents',
                                                        $contents,
                                                        'utf-8'));



エンコーディングパラメータを省略した場合は、
現在のロケールが処理時に使用されます。たとえば次のようになります。

   .. code-block:: php
      :linenos:

      setlocale(LC_ALL, 'de_DE.iso-8859-1');
      ...
      $doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $contents));



フィールドをインデックス化したり返したりする際には、 常に UTF-8
エンコーディングとなります。UTF-8 への変換は自動的に行われます。

テキスト解析器 (:ref:`以下を参照ください <zend.search.lucene.extending.analysis>`)
は、テキストをその他のエンコーディングに変換したりもします。
実際、デフォルトの解析器はテキストを 'ASCII//TRANSLIT'
エンコーディングに変換します。
ここで注意が必要なのは、このような変換は現在のロケールに依存して行われるということです。

フィールドの名前は ``addField()`` メソッドで自由につけることができます。

Java Lucene は、検索の際にデフォルトで使用されるフィールド名として "contents"
を使用します。 ``Zend_Search_Lucene``
は、デフォルトではすべてのフィールドを検索します。
しかし、この挙動を変更することもできます。詳細は
:ref:`"デフォルトの検索フィールド" <zend.search.lucene.query-language.fields>`
の章を参照ください。

.. _zend.search.lucene.index-creation.understanding-field-types:

フィールド型について理解する
--------------

- *Keyword* フィールドは、保存されインデックス化されます。
  つまり、検索した際に元の内容がそのまま返されるということです。
  トークン化は行われません (いくつかの単語に分割されることはありません)。
  列挙方のデータベースフィールドは、通常は ``Zend_Search_Lucene`` の Keyword
  フィールドにうまく収まることでしょう。

- *UnIndexed* フィールドは検索対象になりませんが、
  検索結果としては返されます。このフィールドに設定する値としては、
  データベースのタイムスタンプ、主キー、ファイルシステムのパス
  およびその他の外部識別子などがあります。

- *Binary* フィールドは、トークン化もインデックス化も行われません。
  しかし、検索結果として取得できるように保存されます。
  画像アイコンのようなバイナリデータをバイナリ文字列として
  エンコードしたものなどに対して使用します。

- *Text* フィールドは、保存されインデックス化され、
  そしてトークン化されます。検索項目として使用し、
  かつ検索結果としても取得したいような項目、
  例えばタイトルなどを保存するのに適しています。

- *UnStored* フィールドはトークン化されインデックス化されます。
  しかしインデックスには保存されません。大量のテキストなどに適しています。
  データを保存してしまうとディスク上のインデックスのサイズが大きくなってしまうので、
  検索はしたいが結果としてそれを表示する必要がない場合などは、
  このフィールドを使用しましょう。 ``Zend_Search_Lucene`` インデックスを
  リレーショナルデータベースと組み合わせて使用する場合などには UnStored
  フィールドが実用的に使用できるでしょう。
  大きなデータフィールドの内容の検索用に UnStored フィールドに保存し、
  結果をデータベースから取得するために、もうひとつ別の ID
  フィールドを使用します。

  .. _zend.search.lucene.index-creation.understanding-field-types.table:

  .. table:: Zend_Search_Lucene_Field の型

     +------------------+------+---------------------+---------------+------------+
     |フィールド型            |保存    |インデックス化              |トークン化          |バイナリ        |
     +==================+======+=====================+===============+============+
     |Keyword           |Yes   |Yes                  |No             |No          |
     +------------------+------+---------------------+---------------+------------+
     |UnIndexed         |Yes   |No                   |No             |No          |
     +------------------+------+---------------------+---------------+------------+
     |Binary            |Yes   |No                   |No             |Yes         |
     +------------------+------+---------------------+---------------+------------+
     |Text              |Yes   |Yes                  |Yes            |No          |
     +------------------+------+---------------------+---------------+------------+
     |UnStored          |No    |Yes                  |Yes            |No          |
     +------------------+------+---------------------+---------------+------------+

.. _zend.search.lucene.index-creation.html-documents:

HTML ドキュメント
-----------

``Zend_Search_Lucene`` には HTML をパースする機能もあります。 次のようにして、HTML
ファイルや文字列からドキュメントを直接作成できます。

   .. code-block:: php
      :linenos:

      $doc = Zend_Search_Lucene_Document_Html::loadHTMLFile($filename);
      $index->addDocument($doc);
      ...
      $doc = Zend_Search_Lucene_Document_Html::loadHTML($htmlString);
      $index->addDocument($doc);



``Zend_Search_Lucene_Document_Html`` クラスは、 ``DOMDocument::loadHTML()`` および
``DOMDocument::loadHTMLFile()`` メソッドを用いてソース HTML
をパースしています。つまり、対象となる HTML は整形式である必要はなく、 また XHTML
である必要もありません。一方、ヘッダの "meta http-equiv"
タグで、エンコーディングをきちんと設定しておく必要があります。

``Zend_Search_Lucene_Document_Html`` クラスは、
ドキュメントのタイトル、本文そしてヘッダの meta タグの内容を認識します。

'title' フィールドには /html/head/title の値が入ります。
これはインデックスないにトークン化して保存され、検索の対象となります。

'body' フィールドには body の中身が入ります。
スクリプトやコメント、そしてタグの属性は含まれません。

``Zend_Search_Lucene_Document_Html`` クラスの ``loadHTML()`` および ``loadHTMLFile()`` メソッドには、
オプションの二番目の引数もあります。これを ``TRUE`` に設定すると、 body
の中身もインデックスに格納され、インデックスから取得できるようになります。
body はトークン化とインデックス化だけが行われ、デフォルトでは保存されません。

``loadHTML()`` メソッドおよび ``loadHTMLFile()``
メソッドの三番目のパラメータはオプションで、元の HTML
ドキュメントのエンコーディングを指定します。 省略した場合は、Content-type HTTP-EQUIV
meta タグを使用します。

ドキュメントヘッダの meta タグの内容をもとに、追加のフィールドを作成します。
フィールドの名前は 'name' 属性から取得します。そして 'content'
属性の内容がその値となります。これはトークン化、インデックス化した上で
保存されます。つまり、ドキュメントは meta タグの内容をもとにして
(たとえばキーワードによって) 検索できるようになるわけです。

パースされたドキュメントに、ユーザが別のフィールドを拡張できます。

   .. code-block:: php
      :linenos:

      $doc = Zend_Search_Lucene_Document_Html::loadHTML($htmlString);
      $doc->addField(Zend_Search_Lucene_Field::UnIndexed('created',
                                                         time()));
      $doc->addField(Zend_Search_Lucene_Field::UnIndexed('updated',
                                                         time()));
      $doc->addField(Zend_Search_Lucene_Field::Text('annotation',
                                                    'Document annotation text'));
      $index->addDocument($doc);



作成されたドキュメントにはリンクは含まれません。しかし、
``Zend_Search_Lucene_Document_Html::getLinks()`` および ``Zend_Search_Lucene_Document_Html::getHeaderLinks()``
メソッドでリンクを取得することもできます。

   .. code-block:: php
      :linenos:

      $doc = Zend_Search_Lucene_Document_Html::loadHTML($htmlString);
      $linksArray = $doc->getLinks();
      $headerLinksArray = $doc->getHeaderLinks();



Zend Framework 1.6 以降では、 *rel* 属性が *'nofollow'*
に設定されているリンクを除外できるようになりました。
このオプションを有効にするには ``Zend_Search_Lucene_Document_Html::setExcludeNoFollowLinks($true)``
を使用します。

``Zend_Search_Lucene_Document_Html::getExcludeNoFollowLinks()`` メソッドは、この "nofollow
リンクを除外する" フラグの現在の状態を返します。

.. _zend.search.lucene.index-creation.docx-documents:

Word 2007 ドキュメント
----------------

``Zend_Search_Lucene`` には Word 2007 のパース機能があります。Word 2007
ファイルから直接ドキュメントを作成できます。

   .. code-block:: php
      :linenos:

      $doc = Zend_Search_Lucene_Document_Docx::loadDocxFile($filename);
      $index->addDocument($doc);



``Zend_Search_Lucene_Document_Docx`` クラスは、 *ZipArchive* クラスと *simplexml*
のメソッドでドキュメントをパースします。 *ZipArchive* クラス (php_zip モジュール)
が使用できない場合は、 ``Zend_Search_Lucene_Document_Docx`` を Zend Framework
で使用することはできません。

``Zend_Search_Lucene_Document_Docx``
クラスは、ドキュメントのメタデータとテキストを扱います。メタデータに含まれる内容は、ドキュメントの内容によって
filename, title, subject, creator, keywords, description, lastModifiedBy, revision, modified, created
などがあります。

'filename' フィールドは、実際の Word 2007 ファイルのファイル名です。

'title' フィールドは、実際のドキュメントのタイトルです。

'subject' フィールドは、実際のドキュメントの表題です。

'creator' フィールドは、実際のドキュメントの作成者です。

'keywords' フィールドは、実際のドキュメントのキーワードです。

'description' フィールドは、実際のドキュメントの説明です。

'lastModifiedBy' フィールドは、実際のドキュメントを最後に編集したユーザ名です。

'revision' フィールドは、実際のドキュメントのリビジョン番号です。

'modified' フィールドは、実際のドキュメントの最終更新日時です。

'created' フィールドは、実際のドキュメントの作成日時です。

'body' フィールドは、Word 2007
ドキュメントの実際の本文です。ここに含まれるのは通常のテキストのみで、コメントやリビジョンは含まれません。

``Zend_Search_Lucene_Document_Docx`` クラスの ``loadDocxFile()`` メソッドにもオプションの 2
番目の引数があります。これを ``TRUE`` に設定すると、
本文もインデックスに格納されてインデックスから取得できるようになります。
デフォルトでは、本文のトークン化とインデックスの作成は行いますがインデックスには格納されません。

パースしたドキュメントに、プログラマが任意のフィールドを追加できます。

   .. code-block:: php
      :linenos:

      $doc = Zend_Search_Lucene_Document_Docx::loadDocxFile($filename);
      $doc->addField(Zend_Search_Lucene_Field::UnIndexed(
          'indexTime',
          time())
      );
      $doc->addField(Zend_Search_Lucene_Field::Text(
          'annotation',
          'Document annotation text')
      );
      $index->addDocument($doc);



.. _zend.search.lucene.index-creation.pptx-documents:

Powerpoint 2007 ドキュメント
----------------------

``Zend_Search_Lucene`` には Powerpoint 2007 のパース機能があります。Powerpoint 2007
ファイルから直接ドキュメントを作成できます。

   .. code-block:: php
      :linenos:

      $doc = Zend_Search_Lucene_Document_Pptx::loadPptxFile($filename);
      $index->addDocument($doc);



``Zend_Search_Lucene_Document_Pptx`` クラスは、 *ZipArchive* クラスと *simplexml*
のメソッドでドキュメントをパースします。 *ZipArchive* クラス (php_zip モジュール)
が使用できない場合は、 ``Zend_Search_Lucene_Document_Pptx`` を Zend Framework
で使用することはできません。

``Zend_Search_Lucene_Document_Pptx``
クラスは、ドキュメントのメタデータとテキストを扱います。メタデータに含まれる内容は、ドキュメントの内容によって
filename, title, subject, creator, keywords, description, lastModifiedBy, revision, modified, created
などがあります。

'filename' フィールドは、実際の Powerpoint 2007 ファイルのファイル名です。

'title' フィールドは、実際のドキュメントのタイトルです。

'subject' フィールドは、実際のドキュメントの表題です。

'creator' フィールドは、実際のドキュメントの作成者です。

'keywords' フィールドは、実際のドキュメントのキーワードです。

'description' フィールドは、実際のドキュメントの説明です。

'lastModifiedBy' フィールドは、実際のドキュメントを最後に編集したユーザ名です。

'revision' フィールドは、実際のドキュメントのリビジョン番号です。

'modified' フィールドは、実際のドキュメントの最終更新日時です。

'created' フィールドは、実際のドキュメントの作成日時です。

'body' フィールドは、Powerpoint 2007
ドキュメントのすべてのスライドとノートの実際の本文です。

``Zend_Search_Lucene_Document_Pptx`` クラスの ``loadPptxFile()`` メソッドにもオプションの 2
番目の引数があります。これを ``TRUE`` に設定すると、
本文もインデックスに格納されてインデックスから取得できるようになります。
デフォルトでは、本文のトークン化とインデックスの作成は行いますがインデックスには格納されません。

パースしたドキュメントに、プログラマが任意のフィールドを追加できます。

   .. code-block:: php
      :linenos:

      $doc = Zend_Search_Lucene_Document_Pptx::loadPptxFile($filename);
      $doc->addField(Zend_Search_Lucene_Field::UnIndexed(
          'indexTime',
          time()));
      $doc->addField(Zend_Search_Lucene_Field::Text(
          'annotation',
          'Document annotation text'));
      $index->addDocument($doc);



.. _zend.search.lucene.index-creation.xlsx-documents:

Excel 2007 ドキュメント
-----------------

``Zend_Search_Lucene`` には Excel 2007 のパース機能があります。Excel 2007
ファイルから直接ドキュメントを作成できます。

   .. code-block:: php
      :linenos:

      $doc = Zend_Search_Lucene_Document_Xlsx::loadXlsxFile($filename);
      $index->addDocument($doc);



``Zend_Search_Lucene_Document_Xlsx`` クラスは、 *ZipArchive* クラスと *simplexml*
のメソッドでドキュメントをパースします。 *ZipArchive* クラス (php_zip モジュール)
が使用できない場合は、 ``Zend_Search_Lucene_Document_Xlsx`` を Zend Framework
で使用することはできません。

``Zend_Search_Lucene_Document_Xlsx``
クラスは、ドキュメントのメタデータとテキストを扱います。メタデータに含まれる内容は、ドキュメントの内容によって
filename, title, subject, creator, keywords, description, lastModifiedBy, revision, modified, created
などがあります。

'filename' フィールドは、実際の Excel 2007 ファイルのファイル名です。

'title' フィールドは、実際のドキュメントのタイトルです。

'subject' フィールドは、実際のドキュメントの表題です。

'creator' フィールドは、実際のドキュメントの作成者です。

'keywords' フィールドは、実際のドキュメントのキーワードです。

'description' フィールドは、実際のドキュメントの説明です。

'lastModifiedBy' フィールドは、実際のドキュメントを最後に編集したユーザ名です。

'revision' フィールドは、実際のドキュメントのリビジョン番号です。

'modified' フィールドは、実際のドキュメントの最終更新日時です。

'created' フィールドは、実際のドキュメントの作成日時です。

'body' フィールドは、Excel 2007
ドキュメントのすべてのワークシートのすべてのセルの実際の内容です。

``Zend_Search_Lucene_Document_Xlsx`` クラスの ``loadXlsxFile()`` メソッドにもオプションの 2
番目の引数があります。これを ``TRUE`` に設定すると、
本文もインデックスに格納されてインデックスから取得できるようになります。
デフォルトでは、本文のトークン化とインデックスの作成は行いますがインデックスには格納されません。

パースしたドキュメントに、プログラマが任意のフィールドを追加できます。

   .. code-block:: php
      :linenos:

      $doc = Zend_Search_Lucene_Document_Xlsx::loadXlsxFile($filename);
      $doc->addField(Zend_Search_Lucene_Field::UnIndexed(
          'indexTime',
          time()));
      $doc->addField(Zend_Search_Lucene_Field::Text(
          'annotation',
          'Document annotation text'));
      $index->addDocument($doc);





.. _`http://lucene.apache.org/java/docs/`: http://lucene.apache.org/java/docs/
